#!/bin/zsh -o extended_glob

typeset -a verbose
typeset -a check
zparseopts -E -check=check C=check -verbose=verbose v+=verbose

# Options may come after the playbook name if run via shebang, so remove them
# position-independently.
argv=( ${argv:#--(check|verbose)} )
argv=( ${argv:#-([Cv])##} )

verbosity=${#verbose}
if (( verbosity >= 4 )) setopt verbose
if (( verbosity >= 5 )) setopt xtrace

abort() {
  print "$1" >&2
  exit 1
}

install_homebrew() {
  /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
}

check_homebrew() {
  local brew_install brew_bin
  case $(arch) in
    arm64) brew_install=/opt/homebrew ;;
    i386)  brew_install=/usr/local/Homebrew ;;
  esac
  brew_bin=$brew_install/bin/brew
  if [[ ! -d $brew_install || ! -x $brew_bin ]]; then
    install_homebrew
  fi
}

need_become_pass() {
  local p
  for p in "$@";
    [[ $(cat $p) =~ "(become:[[:space:]]*([Yy]|[Tt]|[Oo][Nn])|ansible_become_password)" ]] &&
      return 0
  return 1
}

get_sudo_pass() {
  need_become_pass "$@" || return
  print -n "Enter your password for sudo: "
  read -rs sudo_password
}

check_homebrew || abort "unable to install Homebrew"

# If Homebrew was just installed, PATH may not contain its bin dir
path=(
  /opt/homebrew/bin(N)
  /usr/local/bin
  /tmp/dotfiles_portable_ansible/venv/bin(N)
  /usr/bin
  /bin
  /usr/sbin
  /sbin
)

if (( ! $+commands[ansible-playbook] )); then
  brew "ansible" || abort "unable to install Ansible"
fi

get_sudo_pass "$@"

ansible-playbook \
  ${verbose:+-${(pl[$verbosity][v])}} \
  ${check:+--check} \
  ${=sudo_password:+"-e ansible_become_password=$sudo_password"} \
  "$@" |& {
    (( verbosity > 0 )) &&
      tee "${0:h}/log/$(date +%s).log" ||
      cat
  }
