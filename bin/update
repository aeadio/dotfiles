#!/bin/sh

yes=
vkpurge=
xbps_cleanup=

OPTIND=0
while getopts "yvo" opt; do
  case $opt in
    y)
      # Auto-accept all updates
      yes=1 ;;
    v)
      # Remove all kernels except (1) the latest and (2) the currently booted
      vkpurge=1 ;;
    o)
      # Clean up orphaned dependencies and stale cached packages
      xbps_cleanup=1 ;;
  esac
done

# Determine if there are available updates
output="$(xbps-install -Sun)"
if [ -z "$output" ]; then
  printf '%s\n' "Up to date."
  exit 0
fi
count="$(printf '%s\n' $output | wc -l)"
printf '%s\n' "$count updates available."
printf '%s\n' ''

# Determine the currently active root filesystem
bootenv="$(mount | awk '/ \/ / {print $1}')"
if [ -z "$bootenv" ]; then
  printf '%s\n' "update: could not determine active boot environment" >&2
  exit 1
fi

# Snapshot the currently active root filesystem
printf '%s\n' '[*] Snapshotting live system'
snapshot="${bootenv}@update_$(date -u +%04Y-%02m-%02d_%02H:%02M:%02S)"
zfs snapshot -r "$snapshot"
printf '%s\n' "Snapshot created: $snapshot"
printf '%s\n' ''

# Install updates
xbps-install -u ${yes:+-y}

# Post-update cleanup
if [ -n "$vkpurge" ]; then
  printf '%s\n' ''
  printf '%s\n' '[*] Removing old kernels'
  vkpurge rm all
fi
if [ -n "$xbps_cleanup" ]; then
  printf '%s\n' ''
  printf '%s\n' '[*] Cleaning up orphaned dependencies'
  xbps-remove -o
  printf '%s\n' ''
  printf '%s\n' '[*] Cleaning up XBPS cache'
  xbps-remove -O
fi
