#!/bin/sh

# Copied to /usr/local/bin to be whitelisted in doas.conf

yes=
vkpurge=
xbps_cleanup=

OPTIND=0
while getopts "yvop" opt; do
  case $opt in
    y)
      # Auto-accept all updates
      yes=1 ;;
    v)
      # Remove all kernels except (1) the latest and (2) the currently booted
      vkpurge=1 ;;
    o)
      # Clean up orphaned dependencies and stale cached packages
      xbps_cleanup=1 ;;
  esac
done

fail() {
  printf '%s\n' "$1" >&2
  exit 1
}

# Determine if there are available updates
updates="$(xbps-install -Sun)" ||
  fail "Unable to determine available system updates."
count="$(printf '%s\n' "$updates" | wc -l)"
if [ "$count" -eq 0 ]; then
  printf '%s\n' "Up to date."
  exit 0
fi

printf '%s\n' "$count updates available"
printf '%s\n' ""
printf '%s\n' "$updates" |
  while read -r pkg action arch mirror instsize dlsize; do
    newver="${pkg##*-}"
    pkg="${pkg%-*}"
    ver="$(xbps-query "$pkg" | sed -n 's/^pkgver: .*-\([[:alnum:]_.]*\)$/\1/p')"
    dlsize="$(numfmt --to=iec "${dlsize:-$instsize}")B"
    printf '%s %s %s %s %s\n' "$pkg" "$action" "$ver" "$newver" "$dlsize"
  done |
  column -t -N "Name,Action,Version,New version,Download size"

# Size to download: 
# Size required on disk: 
# Space available on disk: 

printf '%s\n' ""
printf '%s\n' "Do you want to continue? [Y/n]"
read yn
case "$yn" in
  [Yy]|'') ;;
  *) exit 0 ;;
esac

# Snapshot the zroot
system-snapshot -p "update" ||
  fail "Could not snapshot root filesystem prior to update."

# Install updates
xbps-install -u ${yes:+-y} ||
  fail "Failed to apply updates."

# Post-update cleanup
if [ -n "$vkpurge" ]; then
  printf '%s\n' ''
  printf '%s\n' '[*] Removing old kernels'
  vkpurge rm all
fi
if [ -n "$xbps_cleanup" ]; then
  printf '%s\n' ''
  printf '%s\n' '[*] Cleaning up orphaned dependencies'
  xbps-remove -o
  printf '%s\n' ''
  printf '%s\n' '[*] Cleaning up XBPS cache'
  xbps-remove -O
fi

printf '%s\n' ''
printf '%s\n' 'OK.'
