#!/usr/bin/env luajit

local LABEL = "<span font='Font Awesome 6 Free'>\239\148\184</span>"
local REPEAT_RATE = 4
local COLOR_HALF = '#ebcb8b'
local COLOR_WARN = '#dca493'
local COLOR_FULL = '#bf616a'
local COLOR_SWAP = '#9cb5ce'

local PROCFS_MEM = '/proc/meminfo'
local PROCFS_ARC = '/proc/spl/kstat/zfs/arcstats'

local ustd = require('posix.unistd')
local time = require('posix.sys.time')

local function procfs_fields(file, pattern)
  local f = assert(io.open(file, 'r'))
  local fields = {}
  for line in f:lines() do
    local key, val = line:match(pattern or '^(%S+)%s*(%S+)')
    if key and val then
      fields[key] = tonumber(val) or val
    end
  end
  f:close()
  return fields
end

local function getmemusage()
  local mem = procfs_fields(PROCFS_MEM, '^(%S+):%s+(%d+) kB$')
  local total = mem.MemTotal
  local free  = mem.MemFree
  
  if not total or not free then
    error("unable to get system memory information")
  end
  
  local used
  
  local available = mem.MemAvailable
  if available then
    -- https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=34e431b0ae398fc54ea69ff85ec700722c9da773
    used = total - available
  else
    local diff = free + (mem.Cached or 0) + (mem.SReclaimable or 0) + (mem.Buffers or 0)
    if total >= diff then
      used = total - diff
    else
      used = total - free
    end
  end
  
  local total_swap = (mem.SwapTotal or 0)
  local used_swap = total_swap - (mem.SwapFree or 0)
  
  local arc = procfs_fields(PROCFS_ARC, '^(%S+)%s+%d+%s+(%d+)$')
  if arc and arc.size then
    used = used - math.max(0, math.floor(arc.size / 1024 - (arc.c_min or 0) / 1024))
  end
  
  return used, total, used_swap, total_swap
end

local function render()
  local used, total, swused, swtotal = getmemusage()
  local perc = used / total
  local color
  if perc > 0.9 then
    color = COLOR_FULL
  elseif perc > 0.66 then
    color = COLOR_WARN
  elseif perc > 0.5 then
    color = COLOR_HALF
  end
  local output
  if color then
    output = ("%s <span color='%s'>%.1f GiB</span>"):format(LABEL, color, used / (1024 ^ 2))
  else
    output = ("%s %.1f GiB"):format(LABEL, used / (1024 ^ 2))
  end
  if swtotal > 0 and swused > 0 then
    output = output .. (" [+<span color='%s'>%.1f GiB</span>]"):format(COLOR_SWAP, swused / (1024 ^ 2))
  end
  io.stdout:write(output, '\n')
  io.stdout:flush()
end

while true do
  render()
  ustd.sleep(REPEAT_RATE)
end
