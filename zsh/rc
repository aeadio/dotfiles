#!/usr/bin/env zsh
# vim: ft=sh ts=2 sw=2 et:

export ZSH=$CONF/zsh

if [[ ! -d $ZSH ]]; then
  print "Warning: zsh config directory not found: $ZSH"
  return
fi

# Some functions we'll use throughout rc.d and first party plugins.
quiet() {
  # If we're not connected to a terminal, then don't suppress stdout -- so that
  # quiet can be used inside pipelines without wrapping the whole thing.
  if [[ -t 1 ]]; then
    "$@" &>/dev/null
  else
    "$@" 2>/dev/null
  fi
}

has() {
  (( ${+commands[$1]} > 0 ))
}

isgnu() {
  has $1 && quiet "$1" --version | grep -q GNU
}

# Plugins
# Plugins provide a cohesive and self-contained set of functionality/features, 
# and assume nothing non-extraordinary about the user's config. They should be
# loaded first, as the user may need to call into them within rc.d.
# Note: third party plugins are placed in subdirectories, containing a
# .plugin.zsh file directly underneath. This is frequently NOT executable.
() {
  local f
  for f in $ZSH/plugins/*(-.e:'[[ -x $REPLY ]]':N); . "$f"  # first party plugins
  for f in $ZSH/plugins/*/*.plugin.zsh(-.N); . "$f"         # third party plugins
}

# Users site-functions
# Function definitions (but not bodies) are autoloaded
if [[ -d $ZSH/functions ]]; then
  fpath=($ZSH/functions $fpath)  # prepend to prefer ours over vendor's
  autoload -Uz $ZSH/functions/*(.:t)
fi

# zshrc.d
# User's ZSH config, organized as they see fit.
() {
  local f
  for f in $ZSH/rc.d/*(e:'[[ -x $REPLY ]]':N); . "$f"
}
