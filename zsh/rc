# vim: ft=sh ts=2 sw=2 et:

# This file primarily bootstraps the zshrc. For actual config, see:
# - rc.d      most user configuration
# - pre.d     early-run initialization, eg compinit
# - post.d    late-run initilization, eg load plugins sensitive to startup order
# - env.d     static exports for all shells, including non-interactive
# - functions utility functions for the user, auto-loaded on demand
# - widgets   functions which modify Zsh's input editor (see also: rc.d/zle)
# - plugins.d bundles of self-contained functionality
# - include   non-rc config files for sub utilities
# - vendor    third party plugins/components explicitly loaded elsewhere

# Each section below is wrapped in a named function so that we can blame their
# contribution to startup when ZSHRC_PROFILE is set, and trace their activity
# in the log when ZSHRC_DEBUG is set.

: ${ZSHRC_PROFILE:=0}
: ${ZSHRC_DEBUG:=0}

if [[ ! -d $ZSH ]]; then
  # Set by zsh/env
  print "Warning: Zsh config directory not found: $ZSH" >&2
  return
fi

# Tracing entrypoint
if (( ZSHRC_DEBUG > 0 || ZSHRC_PROFILE )) \
  exec 2> >(tee "$HOME/zshrc-$(date -u +'%Y-%02m-%02dT%02H-%02M-%02SZ').log")
case $ZSH_DEBUG in
  4) setopt xtrace ;|
  3) setopt verbose ;&
  2) setopt source_trace ;&
  4) ;&  # Fallthrough for 4 jumps over 2/3, since they're redundant w/ xtrace
  1) setopt warn_create_global warn_nested_var ;;
esac
if (( ZSHRC_PROFILE )) zmodload zsh/zprof

# pre.d
zshrc:load-pre.d() {
  local f name REPLY
  for f in $ZSH/pre.d/*(e:'[[ -x $REPLY ]]':onN); do
    name=${f:t}
    zshrc:load-pre.d:$name() {
      source $f
    }
    zshrc:load-pre.d:$name
    unfunction zshrc:load-pre.d:$name
  done
}
zshrc:load-pre.d
unfunction zshrc:load-pre.d

# Plugins
# Plain (executable) files in zsh/plugins/ are first-party plugins -- mine.
# Directories are third-party plugins (if they contain a .plugin.zsh file).
# See zsh/functions/zp* for installation helper.
zshrc:load-plugins() {
  local f name REPLY
  local plugins=(
    $ZSH/plugins.d/*(-.e:'[[ -x $REPLY ]]':onN)
    $ZSH/plugins.d/*/*.plugin.zsh(-.onN)
  )
  for f in $plugins; do
    name=${f:t}
    zshrc:load-plugins:$name() {
      source $f
    }
    zshrc:load-plugins:$name
    unfunction zshrc:load-plugins:$name
  done
}
zshrc:load-plugins
unfunction zshrc:load-plugins

# User functions & ZLE widgets
# zsh/functions/* and zsh/widgets/* are autoloaded only if marked executable
zshrc:load-functions() {
  local f REPLY
  local fns=( $ZSH/functions/*(-.e:'[[ -x $REPLY ]]':N:t) )
  local wdg=( $ZSH/widgets/*(-.e:'[[ -x $REPLY ]]':N:t) )
  if (( ${#fns} )); then
    fpath=( $ZSH/functions $fpath )
    autoload $fns
  fi
  if (( ${#wdg} )); then
    fpath=( $ZSH/widgets $fpath )
    autoload $wdg
    for f in $wdg; zle -N $f
  fi
}
zshrc:load-functions
unfunction zshrc:load-functions

# zshrc.d
# Primary place for zsh config. Load last so that it may make use of plugins.
zshrc:load-rc.d() {
  local f name REPLY
  for f in $ZSH/rc.d/*(e:'[[ -x $REPLY ]]':onN); do
    name=${f:t}
    zshrc:load-rc.d:$name() {
      source $f
    }
    zshrc:load-rc.d:$name
    unfunction zshrc:load-rc.d:$name
  done
}
zshrc:load-rc.d
unfunction zshrc:load-rc.d

# post.d
zshrc:load-post.d() {
  local f name REPLY
  for f in $ZSH/post.d/*(e:'[[ -x $REPLY ]]':onN); do
    name=${f:t}
    zshrc:load-post.d:$name() {
      source $f
    }
    zshrc:load-post.d:$name
    unfunction zshrc:load-post.d:$name
  done
}
zshrc:load-post.d
unfunction zshrc:load-post.d

# Stop profiling
case $ZSHRC_PROFILE in
  1) zprof >&2 ;;
  2)
    # Stop timing after all startup scripts, including those that have been
    # deferred to early hooks and/or ZLE callbacks.
    zshrc:profile:finish() {
      zprof >&2
      unset TMOUT
      trap - ALRM
      unfunction zshrc:profile:finish zshrc:profile:precmd
    }
    zshrc:profile:precmd() {
      add-zsh-hook -d precmd zshrc:profile:precmd
      typeset -g TMOUT=1
      trap zshrc:profile:finish ALRM
    }
    autoload -U add-zsh-hook &&
    add-zsh-hook precmd zshrc:profile:precmd
    ;;
esac
