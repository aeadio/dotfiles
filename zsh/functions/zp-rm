# vim: ft=sh ts=2 sw=2 et:

emulate -L zsh -o extended_glob

local force=
local commit=1

OPTIND=0
while getopts "fn" opt; do
  case "$opt" in
    f) force=1 ;;
    n) commit= ;;
  esac
done
shift $(( OPTIND - 1 ))

if (( ! $# )); then
  print "usage: zp-rm <pluginname> [<pluginname>...]" >&2
  return
fi

if (( ! $+commands[git] )); then
  print "fatal: requires git" >&2
  return
fi

if [[ -z $ZSH || ! -d $ZSH ]]; then
  print "error: zsh config directory not found: $ZSH" >&2
  return
fi

local plugindir=$ZSH/plugins
if [[ ! -d $plugindir ]]; then
  return
fi

(
  if ! cd $plugindir; then
    print "fatal: could not enter plugin directory." >&2
    return 1
  fi
  unset GIT_DIR GIT_WORK_TREE GIT_INDEX_FILE GIT_OBJECT_DIRECTORY \
    GIT_ALTERNATE_OBJECT_DIRECTORIES
  
  local changed=() fail=
  local p f
  for p in "$@"; do
    [[ -z "$p" ]] && continue
    print -P "%B%F{blue}Removing plugin $name%f%b"
    if [[ ! -e $p ]]; then
      print -P "%B%F{blue}-> Plugin $name not found, skipping%f%b"
      print " "
      continue
    fi
    if [[ -e $p/.git ]]; then
      git submodule deinit ${force:+--force} $p &&
      git rm ${force:+--force} $p
      if (( $? )); then
        print -P "%B%F{red}-> Failed to remove plugin $name%f%b"
        print " "
        fail=1
        continue
      fi
      changed+=( $p )
    elif (( $force )); then
      rm -i -r $p
    else
      print -P "%B%F{red}-> Plugin $name is not a Git module, skipping%f%b"
    fi
    print " "
  done
  
  if (( ! ${#changed} )); then
    return
  fi
  
  if (( $fail )); then
    print -P "%B%F{red}Some plugins could not be removed, skipping commit%f%b"
    return
  fi
  
  print -P "%B%F{blue}${#changed} plugins removed%f%b"
  if (( commit )); then
    print -P "%B%F{blue}Committing changes...%f%b"
    git commit -m "zsh: Remove plugins ${(pj:, :)changed}" \
      --only $changed $gitroot/.gitmodules
  fi
)
