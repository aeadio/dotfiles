# vim: ft=sh ts=2 sw=2 et:

# Updates all third party Zsh plugins installed as Git submodules in 
# zsh/plugins.d.

emulate -L zsh -o extended_glob

local force=
local commit=1

OPTIND=0
while getopts "fn" opt; do
  case "$opt" in
    f) force=1 ;;
    n) commit= ;;
  esac
done
shift $(( OPTIND - 1 ))

if [[ $1 == -f ]]; then
  force=1
  shift
fi

if (( ! $+commands[git] )); then
  print "fatal: requires git" >&2
  return
fi

if [[ -z $ZSH || ! -d $ZSH ]]; then
  print "error: zsh config directory not found: $ZSH" >&2
  return
fi

local plugindir=$ZSH/plugins

(
  if ! cd $plugindir; then
    print "fatal: could not enter plugin directory." >&2
    return 1
  fi
  unset GIT_DIR GIT_WORK_TREE GIT_INDEX_FILE GIT_OBJECT_DIRECTORY \
    GIT_ALTERNATE_OBJECT_DIRECTORIES
  
  local list=( "$@" )
  if (( ${#list} == 0 )); then
    list=( $ZSH/plugins/*(-/e:'[[ -e $REPLY/.git ]]':N:t) )
  fi
  
  local changed=()
  local name reason f
  for name in $list; do
    [[ -z "$name" ]] && continue
    print -P "%B%F{blue}Checking plugin $name for updates%f%b"
    if [[ ! -d $name ]]; then
      print -P "%B%F{blue}-> Plugin $name not found, skipping%f%b"
      print " "
      continue
    fi
    git submodule update --recursive --remote ${force:+--force} $name
    if (( $? )); then
      print -P "%B%F{red}-> Plugin $name failed to update%f%b"
      print " "
      continue
    fi
    changed+=( $name )
    print " "
  done
  
  if (( ${#changed} )); then
    local gitroot=$(git rev-parse --show-toplevel)
    print -P "%B%F{blue}${#changed} plugins updated.%f%b"
    if (( commit )); then
      print -P "%B%F{blue}Committing changes...%f%b"
      git commit -m "zsh: Updated plugins ${(pj:, :)changed}" \
        --only $changed $gitroot/.gitmodules
    fi
  fi
)
