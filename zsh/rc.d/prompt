#!/usr/bin/env zsh
# vim: ft=sh ts=2 sw=2 et:

setopt prompt_subst

() {
  emulate -L zsh -o interactive_comments
  
  PS1=$(
    # Build up our prompt piece by piece. Result:
    # user@host:dir (gitbranch) %awsprofile
    # » 
    
    add()     print -n "$*"
    newline() print ""
    
    # Start with a newline so we always have some visual padding between commands
    newline
    
    # Username
    # Colored red if root, else cyan
    add '%(!,%F{red},%F{cyan})%n%f'
    
    # Hostname
    # Use the full hostname (FQDN) if over SSH/mosh, else the short hostname
    # Colored green if over SSH/mosh, else bright magenta
    if (( $+SSH_CLIENT || $+SSH_TTY )); then
      add '@%F{green}%M%f'
    else
      add '@%B%F{magenta}%m%f%b'
    fi
    
    # Directory
    # Colored bright blue
    add ':%B%F{blue}%~%f%b'
    
    # Git branch
    # Fun: inside $() expansion, stdout is not considered to be connected to a 
    # terminal. That's obvious in hindsight, but breaks our 'quiet' function 
    # inside 'has'. Need to think of a clever POSIX fix to cover this case.
    if has git &>/dev/null; then
      add '$(
        exec 2>/dev/null
        local branch="$(git symbolic-ref -q --short HEAD ||
          git rev-parse --short HEAD)"
        [[ -n $branch ]] && print -n " (%B%F{cyan}$branch%f%b)"
      )'
    fi
    
    # AWS profile
    # Only shows up if within a project directory (~/Source/*, ~/src/*)
    add '$(
      if [[ -n $AWS_PROFILE && ($PWD = $HOME/Source* || $PWD = $HOME/src*) ]]; then
        print -n " %%%F{cyan}$AWS_PROFILE%f"
      fi
    )'
    
    if (( $+RANGER_LEVEL )); then
      add ' [%F{green}R%f]'
    fi
    
    newline
    
    # Prompt
    # If we tried to copy and paste a command, the prompt portion turns red.
    # See: zsh/plugins/bad-input.
    add '$(
      if (( _BAD_INPUT > 0 )); then
        print -n "%(!,%F{magenta},%F{red})»%f "
      else
        print -n "%(!,%F{red},%F{cyan})»%f "
      fi
    )'
  )

  PS2="%(!,%F{red},%F{cyan})»%f "
  PS3=$PS2
}
