# vim: ft=sh ts=2 sw=2 et:

# Prompt formats
() {
  # [[user][@host]:]dir [⨕gitbranch[:commits][ ⇄ localchanges]]
  # »                                                              ⋮stack ⠶shlvl
  local ps1=(
    'print'  # Start with newline for some padding between commands
    'prompt:basicinfo'
    'prompt:directory'
    'prompt:git'
    
    'print'
    'prompt:caret'
    'print -n " "'
  )
  
  # » 
  local ps2=(
    'prompt:caret'
    'print -n " "'
  )
  
  # ?
  local ps3=(
    'prompt:caret "?"'
    'print -n " "'
  )
  
  # function:linenum @ file:linenum
  # → details
  # Indent by 2 spaces for each execution depth
  local ps4=(
    'print'
    'print -n "%B%F{blue}%2x%f%b:%B%F{magenta}%I%f%b"'
    'print -n " in %B%F{cyan}%N%f%b"'
    
    'print'
    'print -n "${(pl[${(%):-%e}][  ])}"'
    "print -n '%F{cyan}${${UTF8:+${(#):-16#2192} }:->}%f'"
  )
  
  local rps1=(
    'prompt:bufstack'
    'prompt:promptception'
    'prompt:aws'
  )
  
  # Build prompts from arrays
  setopt prompt_subst
  local i
  for i in {1..4}; do
    eval -- "typeset -g  PS$i=\"\\\$( \${(j:; :)ps$i}  )\""
    eval -- "typeset -g RPS$i=\"\\\$( \${(j:; :)rps$i} )\""
  done
}

# Info blocks
prompt:basicinfo() {
  emulate -L zsh
  unset PROMPT_INFOLEN
  local user host info elidename
  # Username
  # Only show if we've su'd to a user that's out of the ordinary. Only show for 
  # root if our environment does not support color, otherwise depend on color
  # scheme shift to indicate root shell.
  if [[ ${(%):-%n} == a(|nt(|hony(|.(|eadicicco)))) ]] elidename=1
  if (( $+CLICOLOR )) && [[ ${(%):-%n} == root ]] elidename=1
  if (( ! elidename )) user="%(!,%B%F{red},%F{cyan})%n%f%b"
  # Hostname
  # Only show if connected to remote host
  if (( $+SSH_CLIENT || $+SSH_TTY )); then
    host='@%(!,%F{yellow},%B%F{magenta})%m%f%b'
  fi
  if [[ -n "$user$host" ]]; then
    info="$user$host:"
    typeset -g PROMPT_INFOLEN=$(( ${#info} + 1 ))
    print -n -- $info
  fi
}

prompt:directory() {
  emulate -L zsh
  local maxwidth=$(( COLUMNS - PROMPT_INFOLEN ))
  if (( maxwidth < 0 )); then
    return
  elif [[ -n $PS_GIT_HEAD ]] && (( maxwidth > 15 )); then
    (( maxwidth = maxwidth >= 120 ? maxwidth - 40 : maxwidth / 3 * 2 ))
  fi
  local fullpath=${(%):-%~}
  local display=$fullpath
  local ellipses=${${UTF8:+${(#):-16#2026}}:-..}
  local reply
  if (( ${#display} > maxwidth )); then
    # Favor the last components in the path
    # If the first component is '~', always display it
    local components=( ${(s:/:)fullpath} ) pre='/'
    if [[ $components[1] == '~' ]]; then
      components=( $components[2,-1] )
      pre='~/'
    fi
    local n=${#components} npre=${#pre}
    local i rem=$(( maxwidth - npre )) len
    for (( i = n; i > 0; i-- )); do
      len=${#components[$i]}
      if (( rem - len - npre <= ${#ellipses} + 1 )); then
        truncate -q $(( rem - npre )) $components[$i]
        components[$i]=$reply
        break
      else
        (( rem -= len + 1 ))  # count one for the preceding /
      fi
    done
    if (( --i > 0 )); then
      components[$i]=$ellipses
      for (( --i ; i > 0; i-- )); components[$i]=
    fi
    display="$pre${(j:/:):-${=components}}"
  fi
  typeset -g PS_DIRLEN=${#display}
  print -n "%(!,%F{magenta},%B%F{blue})$display%f%b"
}

prompt:git() {
  emulate -L zsh
  local branch=$PS_GIT_HEAD commits=$PS_GIT_COMMITS changes=$PS_GIT_CHANGES
  if [[ -z $branch ]]; then
    return
  fi
  local maxsize=$(( COLUMNS - PS_DIRLEN - 1 ))
  if (( maxsize < 4 )); then
    return
  fi
  local invisible='%([BSUbfksu]|([FK]|){*})'
  local lbr=$(( ${#branch} + 1 ))
  local lco=$(( ${#${(S%%)commits//$~invisible/}} + 1 ))
  local lch=$(( ${#${(S%%)changes//$~invisible/}} + 3 ))
  local bsize=$(( maxsize - lco - lch ))
  local reply
  if (( lbr > bsize )); then
    # If we don't have enough space to show much, elide some portions
    if (( bsize < maxsize / 2 )); then
      changes=
      bsize=$(( maxsize - lco ))
    fi
    if (( bsize < maxsize / 2 )); then
      commits=
      bsize=$maxsize
    fi
    truncate -q -l $bsize $branch
    branch="$reply"
  fi
  print -n " ${UTF8:+${(#):-16#2a15}}%(!,%B%F{red},%B%F{cyan})$branch%f%b"
  if [[ -n $commits ]]; then
    print -n ":$commits"
  fi
  if [[ -n $changes ]]; then
    print -n "${UTF8:+ ${(#):-16#21c4}} $changes"
  fi
}

prompt:promptception() {
  emulate -L zsh
  # If SHLVL is over 1, show. If we're inside ranger, color it green.
  local lvl=${SHLVL:#1} color
  (( $+RANGER_LEVEL )) &&
    color=green ||
    color=cyan
  if [[ -n "$lvl" ]]; then
    print -n " ${${UTF8:+${(#):-16#2836}}:-L}%F{$color}$lvl%f%b"
  fi
}

prompt:aws() {
  emulate -L zsh
  local profile reply
  if [[ ${(%):-%-2~} != '~'/([Ss]ource|[Pp]rojects) ]]; then
    # Only show AWS_PROFILE when in a directory related to infra work
    return
  fi
  if [[ -n ${AWS_PROFILE:#default} ]]; then
    truncate -q -l 10 $AWS_PROFILE
    profile=$reply
    print -n " ${${UTF8:+${(#):-16#1fbca}}:-%}%(!,%F{yellow},%B%F{magenta})$AWS_PROFILE%f%b"
  fi
}

prompt:bufstack() {
  emulate -L zsh
  if (( BUFSTACK > 0 )); then
    print -n " ${${UTF8:+${(#):-16#22ee}}:-S:}%F{yellow}$BUFSTACK%f"
  fi
}

prompt:caret() {
  emulate -L zsh
  local caret
  if (( $+RANGER_LEVEL )); then
    # Is it possible to determine if _the shell we're in_ is spawned from 
    # ranger? Ie, if we've entered another shell, make this go away.
    caret='R'
  elif (( ! $+UTF8 )); then
    caret='>'
  elif (( _BAD_INPUT > 0 )); then
    caret="${(#):-16#226f}"
  else
    caret="${(#):-16#bb}"
  fi
  print -n "%(!,%B%F{red},%F{cyan})${1:-$caret}%f%b"
}

if has git; then
  autoload -U add-zsh-hook
  
  prompt:git-finished-zle() {
    local fd=$1
    local head commits changes
    {
      zle -F $fd
      read -ru $fd head
      read -ru $fd commits
      read -ru $fd changes
      if [[ $head == $PS_GIT_HEAD
        && $commits == $PS_GIT_COMMITS
        && $changes == $PS_GIT_CHANGES ]]; then
        return
      fi
      typeset -g PS_GIT_HEAD=$head
      typeset -g PS_GIT_COMMITS=$commits
      typeset -g PS_GIT_CHANGES=$changes
      if zle && [[ $CONTEXT == 'start' ]]; then
        zle reset-prompt
      fi
    } always {
      exec {fd}<&-
    }
  }
  zle -N prompt:git-finished-zle
  
  prompt:git-dispatch() {
    local fd
    exec {fd}< <( prompt:git-async )
    zle -Fw $fd prompt:git-finished-zle
  }
  add-zsh-hook precmd prompt:git-dispatch
  
  prompt:git-clear() {
    unset PS_GIT_HEAD PS_GIT_COMMITS PS_GIT_CHANGES
  }
  add-zsh-hook chpwd prompt:git-clear
  
  prompt:git-async() {
    emulate -L zsh -o err_return -o pipefail
    
    exec 2>/dev/null
    
    env GIT_OPTIONAL_LOCKS=0 git status --branch --porcelain=v2 \
      | awk -v utf8=$UTF8 '
        BEGIN {
          if (utf8) {
            fmt_behind    = "%%B%%F{red}\\u2193%d%%f%%b"
            fmt_ahead     = "%%B%%F{green}\\u2191%d%%f%%b"
            fmt_unmerged  = "%%{\\e[2m%%}%%F{yellow}\\u21af%d%%f%%b"
            fmt_staged    = "%%F{yellow}\\u25b2%d%%f"
            fmt_unstaged  = "%%F{yellow}\\u25b3%d%%f"
            fmt_untracked = "%%F{blue}\\u2298%d%%f"
          } else {
            fmt_behind    = "%%B%%F{red}b%d%%f%%b"
            fmt_ahead     = "%%B%%F{green}a%d%%f%%b"
            fmt_unmerged  = "%%{\\e[2m%%}%%F{yellow}m%d%%f%%b"
            fmt_staged    = "%%F{yellow}s%d%%f"
            fmt_unstaged  = "%%F{yellow}u%d%%f"
            fmt_untracked = "%%F{blue}n%d%%f"
          }
        }
        
        $2 == "branch.oid" {
          oid = $3;
        }
        $2 == "branch.head" {
          head = $3;
        }
        $2 == "branch.ab" {
          ahead = $3;
          behind = $4;
        }
        $1 == "?" {
          ++untracked;
        }
        $1 == "u" {
          ++unmerged;
        }
        $1 == "1" || $1 == "2" {
          split($2, arr, "");
          if (arr[1] != ".") {
            ++staged;
          }
          if (arr[2] != ".") {
            ++unstaged;
          }
        }
        
        END {
          if (! head)
            exit
          
          if (head == "(detached)")
            head = substr(oid, 0, 7)
          print(head)
          
          if (ahead || behind) {
            if (behind < 0)
              commits = commits sprintf(fmt_behind, behind * -1)
            if (ahead > 0)
              commits = commits sprintf(fmt_ahead, ahead)
          }
          print(commits)
          
          if (unmerged || staged || unstaged || untracked) {
            if (unmerged > 0)
              changes = changes sprintf(fmt_unmerged, unmerged)
            if (staged > 0)
              changes = changes sprintf(fmt_staged, staged)
            if (unstaged > 0)
              changes = changes sprintf(fmt_unstaged, unstaged)
            if (untracked > 0)
              changes = changes sprintf(fmt_untracked, untracked)
          }
          print(changes)
        }
      '
  }
fi
